--SELECT * FROM player_seasons;
--CREATE TYPE season_stats AS (
--    season INTEGER,
--    gp INTEGER,
--    pts REAL,
--    reb REAL,
--    ast REAL
--)

-- CREATE TYPE scoring_class as ENUM (
--     'star',
--     'good',
--     'average',
--     'bad'
-- );

-- CREATE TABLE players (
--    player_name TEXT,
--    height TEXT,
--    college TEXT,
--    country TEXT,
--    draft_year TEXT,
--    draft_round TEXT,
--    draft_number TEXT,
--    season_stats season_stats[],
--    current_season INTEGER,
--    scoring_class scoring_class,
--    years_since_last_season INTEGER,
--    PRIMARY KEY (player_name, current_season)
-- )

INSERT INTO players

with yesterday as (
    select * from players
    where current_season = 2000
), today as (
    select * from player_seasons
    where season = 2001
)

select
COALESCE(t.player_name, y.player_name) as player_name,
COALESCE(t.height, y.height) as height,
COALESCE(t.college, y.college) as college,
COALESCE(t.country, y.country) as country,
COALESCE(t.draft_year, y.draft_year) as draft_year,
COALESCE(t.draft_round, y.draft_round) as draft_round,
COALESCE(t.draft_number, y.draft_number) as draft_number,
CASE
when y.season_stats is null
then ARRAY[row(
    t.season,
    t.gp,
    t.pts,
    t.reb,
    t.ast
)::season_stats]
when t.season is not null then y.season_stats || ARRAY[row(
    t.season,
    t.gp,
    t.pts,
    t.reb,
    t.ast
)::season_stats]
else y.season_stats
end as season_stats,
COALESCE(t.season, y.current_season + 1) as current_season,
CASE
WHEN t.season is not null then
case
WHEN t.pts > 20 THEN 'star'
WHEN t.pts > 15 THEN 'good'
WHEN t.pts > 10 THEN 'average'
ELSE 'bad'
END::scoring_class
else y.scoring_class
END as scoring_class,
CASE
WHEN t.season is not null then 0
ELSE y.years_since_last_season + 1
END as years_since_last_season

from today t 
full outer join yesterday y
on t.player_name = y.player_name



